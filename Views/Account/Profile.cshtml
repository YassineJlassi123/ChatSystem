@model jwtlogin.Controllers.AccountController.ProfileAndPostViewModel

<!-- Profile Section -->
<div class="relative w-full bg-primary flex items-center justify-center" style="height:350px">
    @if (Model.User.CoverImageUrl != null)
    {
        <img src="@Model.User.CoverImageUrl" alt="Coverteur Photo" class="w-full h-full object-cover" />
    }
    else
    {
        <img src="/images/static/cover.png" alt="Coverteur Photo" class="w-full h-full object-cover" />
    }
    <div class="absolute flex items-center justify-center" style="bottom:20px">
        <div class="relative bg-white p-2 rounded-full">
            @if (Model.User.ProfileImageUrl != null)
            {
                <img src="@Model.User.ProfileImageUrl" alt="Avatar" class="w-40 h-40 rounded-full object-cover" />
            }
            else
            {
                <img src="/images/static/placeholder.png" alt="Avatar" class="w-40 h-40 rounded-full object-cover" />
            }
            @if (Model.IsProfileOwner)
            {
                <form id="profileImageForm" asp-action="UploadProfileImage" enctype="multipart/form-data" method="post" class="absolute bottom-0 right-0">
                    <input type="file" name="profileImage" class="hidden" id="profileImageInput" accept="image/*">
                <button type="button" onclick="triggerProfileImageUpload()" class="bg-white p-2 rounded-full">
                    <img src="/images/static/camera.png" alt="Icon" class="w-8 h-8" />
                </button>
            </form>
            }
        </div>
    </div>
     @if (Model.IsProfileOwner)
            {
    <form id="coverImageForm" asp-action="UploadCoverImage" enctype="multipart/form-data" method="post" class="absolute" style="right:20px;bottom:20px">
        <input type="file" name="coverImage" class="hidden" id="coverImageInput" accept="image/*">
        <button type="button" onclick="triggerCoverImageUpload()" class="bg-white p-2 rounded-full">
            <img src="/images/static/camera.png" alt="Icon" class="w-8 h-8" />
        </button>
    </form>
            }
</div>

<div class="text-center mt-2">
    <h2 class="text-lg font-semibold text-primary">@Model.User.Username</h2>
    <span class="text-muted-foreground">@Model.User.NumberOfFriends amis</span>
    <div class="flex items-center space-x-2 justify-center mt-4">
        <div class="flex space-x-[-10px]">
            @foreach (var friend in Model.User.Friends.Take(7))
            {
                @if (friend.ProfileImageUrl != null)
                {
                    <img class="w-10 h-10 rounded-full" src="@friend.ProfileImageUrl" alt="@friend.Username" />
                }
                else
                {
                    <img class="w-10 h-10 rounded-full" src="/images/static/placeholder.png" alt="@friend.Username" />
                }
            }
        </div>
    </div>
</div>
 @if (Model.IsProfileOwner)
            {
    <!-- Create Post Section -->
    <div id="post-creation-section" class="bg-card p-4 rounded-lg shadow-md mb-4 max-w-lg mx-auto">
        <h2 class="text-lg font-bold mb-2">Créer une publication</h2>
        <form id="createPostForm" method="post" enctype="multipart/form-data">
            <div class="flex items-center mb-4">
                <img class="w-12 h-12 rounded-full" src="@Model.User.ProfileImageUrl" alt="User Avatar" />
                <div class="ml-3">
                    <span class="text-lg font-semibold">@Model.User.Username</span>
                </div>
            </div>

            <!-- Post Type Selector -->
            <div class="mb-4">
                <label for="postType">Type de publication:</label>
                <select id="postType" name="Post.Type" class="w-full p-2 border border-border rounded-md">
                    <option class="w-full" value="text_image">Texte/Image</option>
                    <option class="w-full" value="ai_image">Générer Image par IA</option>
                 
                </select>
            </div>

            <!-- Text Content -->
            <div id="textContentSection">
                <textarea name="Post.Content" id="postContent" class="w-full p-2 border border-border rounded-md focus:outline-none focus:ring focus:ring-ring"
                          rows="3" placeholder="Que voulez-vous dire ?" required></textarea>
                <span id="content-validation" class="text-red-500"></span>
            </div>

            <!-- Image Upload for Text/Image Post -->
            <div id="imageUploadSection" class="flex items-center justify-between mt-4">
                <label for="image-upload" class="flex items-center space-x-2 cursor-pointer">
                    <input type="file" id="image-upload" name="Post.Image" class="hidden" accept="image/*" onchange="previewImage()" />
                    <img id="preview-image" src="~/images/static/gallery.png" alt="Uploaded Image" class="cursor-pointer rounded-md h-32 w-full object-cover" />
                </label>
                <span id="image-validation" class="text-red-500"></span>
            </div>

            <!-- AI Image Prompt for AI Post -->
            <div id="aiImagePromptSection" class="hidden">
                <label for="ImagePrompt">Décrire l'image à générer (Prompt IA):</label>
                <input type="text" id="ImagePrompt" name="Post.ImagePrompt" placeholder="Décrire l'image à générer"
                       class="w-full p-2 border border-border rounded-md">
            </div>



            <button style="background-color: lightgray;" type="button" id="submitPost" class="bg-primary text-primary-foreground hover:bg-primary/80 w-full mt-4 p-2 rounded-md flex items-center justify-center">
                <img id="loadingIcon" src="~/images/static/work-in-progress.png" alt="Loading" class="hidden w-5 h-5 mr-2" /> <!-- Rotating icon -->
                Publier
            </button>
        </form>
    </div>


}
<!-- Posts Section -->
<div id="post-container" class="max-w-lg mx-auto bg-card rounded-lg shadow-md p-4 mt-6">
    @if (Model.Posts != null && Model.Posts.Any())
    {
        @foreach (var post in Model.Posts.OrderByDescending(p => p.CreatedAt))
        {
            <div class="bg-card p-4 rounded-lg shadow-md mb-4" data-post-id="@post.Id">
                <div class="flex items-center mb-4">
                    @if (!string.IsNullOrEmpty(Model.User.ProfileImageUrl))
                    {
                        <img class="w-12 h-12 rounded-full" src="@Model.User.ProfileImageUrl" alt="User Avatar" />
                    }
                    else
                    {
                        <img class="w-12 h-12 rounded-full" src="https://placehold.co/48x48" alt="User Avatar" />
                    }
                    <div class="ml-3">
                        <h2 class="text-lg font-semibold">@Model.User.Username</h2>
                        <p class="text-muted-foreground text-sm" data-date="@post.CreatedAt.ToString("o")"></p>
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(post.Content))
                {
                    <p id="post-content-@post.Id" class="text-primary-foreground text-sm mb-2 max-w-[400px] break-words whitespace-normal" data-full-content="@post.Content">
                        @post.Content
                    </p>
                }

                @if (!string.IsNullOrEmpty(post.ImageUrl))
                {
                    <img style="width:100%" class="rounded-lg mb-4" src="@post.ImageUrl" alt="Post Image" />
                }

               

                <div class="flex justify-between">
                    <div class="flex items-center">
                        <button class="bg-primary text-primary-foreground p-2 rounded-full hover:bg-primary/80" onclick="likePost(@post.Id)">
                            ❤️
                        </button>
                        <span class="ml-2 text-muted-foreground" id="like-count-@post.Id">@post.JaimeCount</span>
                    </div>
                    <div class="flex items-center">
                        <a href="@Url.Action("PostDetails", "Account", new { postId = post.Id })" class="bg-secondary text-secondary-foreground p-2 rounded-full hover:bg-secondary/80">
                            💬
                        </a>
                        <a href="@Url.Action("PostDetails", "Account", new { postId = post.Id })" class="ml-2 text-muted-foreground comment-count">
                            @post.CommentCount comments
                        </a>
                    </div>
                </div>

                <!-- New Comment Input Design -->
                <div class="mt-4">
                    <div class="relative mt-2">
                        <textarea id="comment-input-@post.Id" class="border border-border rounded-lg p-2 w-full pl-10 resize-none overflow-hidden" placeholder="Write a comment..." rows="1"></textarea>
                        <button class="absolute top-2 right-2 bg-primary text-primary-foreground p-2 rounded-full hover:bg-primary/80" onclick="addComment(@post.Id)">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                            </svg>
                        </button>
                    </div>
                </div>

                <div class="comments-section mt-4"></div>
            </div>
        }
    }
    else
    {
        <p>No posts to display.</p>
    }
</div>

<div id="loading-indicator" class="text-center mt-4 hidden">
    <p>Loading more posts...</p>
</div>


<button id="close" style="display:none" onclick="closeARView()">Close AR View</button>


@section Scripts {
    <script>
       
      

        // Handle post type change
        document.getElementById('postType').addEventListener('change', function () {
            const postType = this.value;

            document.getElementById('textContentSection').classList.toggle('hidden', postType !== 'text_image');
            document.getElementById('imageUploadSection').classList.toggle('hidden', postType !== 'text_image');
            document.getElementById('aiImagePromptSection').classList.toggle('hidden', postType !== 'ai_image');

            
        });


       




       

        

        window.onload = function () {

            const Posts = document.querySelectorAll("[id^='post-content-']");
            Posts.forEach(post => {
                const fullContent = post.getAttribute("data-full-content");

                if (fullContent && fullContent.length > 300) {
                    const truncatedComment = fullContent.substring(0, 300) + "...";
                    post.textContent = truncatedComment;
                    const showMoreLink = document.getElementById("show-more-" + post.id.split('-').pop());
                    showMoreLink.style.display = 'inline'; // Show 'Show more' link
                }
            });
            
            const comments = document.querySelectorAll("[id^='comment-content-']");
            comments.forEach(comment => {
                const fullComment = comment.getAttribute("data-full-comment");

                if (fullComment && fullComment.length > 100) {
                    const truncatedComment = fullComment.substring(0, 100) + "...";
                    comment.textContent = truncatedComment;
                    const showMoreLink = document.getElementById("show-more-" + comment.id.split('-').pop());
                    showMoreLink.style.display = 'inline'; // Show 'Show more' link
                }
            });
        };

        function togglePostContent(postId) {
            const postContentElement = document.getElementById(`post-content-${postId}`);
            const fullContent = postContentElement.getAttribute('data-full-content');
            const showMoreLink = document.getElementById(`show-more-${postId}`);


            if (showMoreLink.textContent === "Show more") {
                postContentElement.textContent = fullContent;
                showMoreLink.textContent = "Show less";
            } else {
                postContentElement.textContent = fullContent.substring(0, 300) + "...";
                showMoreLink.textContent = "Show more";
            }

           
        }

   


        function toggleComment(commentId) {
          
            const commentElement = document.getElementById(`comment-content-${commentId}`);
            const fullComment = commentElement.getAttribute("data-full-comment");
            const showMoreLink = document.getElementById(`show-more-${commentId}`);

            if (showMoreLink.textContent === "Show more") {
                commentElement.textContent = fullComment;
                showMoreLink.textContent = "Show less";
            } else {
                commentElement.textContent = fullComment.substring(0, 100) + "...";
                showMoreLink.textContent = "Show more";
            }
        }


        async function addComment(postId) {
            const content = document.getElementById(`comment-input-${postId}`).value.trim();
            if (!content) {
                alert('Comment cannot be empty');
                return;
            }

            try {
                const response = await fetch(`/Account/AddComment`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ postId, content })
                });

                if (!response.ok) {
                    const errorMessage = await response.text();
                    alert(`Error: ${errorMessage}`);
                    return;
                }

                const data = await response.json();

                // Clear the comment input
                document.getElementById(`comment-input-${postId}`).value = '';

                // Update the comment count in the UI
                const commentCountElement = document.querySelector(`[data-post-id="${postId}"] .comment-count`);
                if (commentCountElement) {
                    commentCountElement.textContent = `${data.CommentCount} comments`;
                }

                // Optionally, add the new comment to the comments section
                const postElement = document.querySelector(`[data-post-id="${postId}"]`);
                if (postElement) {
                    const commentsSection = postElement.querySelector('.comments-section');
                    if (commentsSection) {
                        const newComment = document.createElement('div');
                        newComment.classList.add('comment');

                        // Check if the comment is long and needs truncation
                        let truncatedContent = data.Content;
                        let showMore = false;
                        if (data.Content.length > 100) {
                            truncatedContent = data.Content.substring(0, 100) + "...";
                            showMore = true;
                        }
                        const timeAgoString = timeAgo(data.CreatedAt);

                        newComment.innerHTML = `
                                        <div class="flex items-center mt-4">
                                            <img class="w-10 h-10 rounded-full" src="${data.ProfileImageUrl}" alt="User Avatar" />
                                            <div class="ml-3">
                                                <h3 class="text-sm font-semibold">${data.Username}</h3>
                                                    <p class="text-muted-foreground text-xs">${timeAgoString}</p>
                                            </div>
                                        </div>
                                                <p id="comment-content-${data.commentId}" class="text-muted-foreground mt-2 max-w-[400px] break-words whitespace-normal" data-full-comment="${data.Content}">
                                            ${truncatedContent}
                                        </p>
                                                            <a style=" display: none" href="javascript:void(0)" class="text-primary show-more-link" id="show-more-${data.commentId}" onclick="toggleComment(${data.commentId})">Show more</a>
                                    `;

                        if (commentsSection.firstChild) {
                            commentsSection.insertBefore(newComment, commentsSection.firstChild);
                        } else {
                            commentsSection.appendChild(newComment);  // If there are no existing comments, just append it
                        }

                        if (showMore) {
                            const showMoreLink = document.getElementById(`show-more-${data.commentId}`);
                            showMoreLink.style.display = 'inline';
                        }


                    }
                }
            } catch (error) {
                console.error('Error adding comment:', error);
                alert('An error occurred. Please try again.');
            }
        }


        async function likePost(postId) {
            try {
                const response = await fetch(`/Account/LikePost`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(postId)
                });

                if (!response.ok) {
                    const errorMessage = await response.text();
                    alert(`Error: ${errorMessage}`);
                    return;
                }

                const data = await response.json();

                // Update the like count in the UI
                const likeCountElement = document.getElementById(`like-count-${postId}`);
                if (likeCountElement) {
                    likeCountElement.textContent = data.JaimeCount;
                }

                // Optionally: Change the appearance of the like button to show whether it's liked or not
                const likeButton = document.querySelector(`[onclick="likePost(${postId})"]`);
                if (likeButton) {
                    if (likeButton.classList.contains('liked')) {
                        // User unliked the post, so remove the 'liked' class
                        likeButton.classList.remove('liked');
                    } else {
                        // User liked the post, so add the 'liked' class
                        likeButton.classList.add('liked');
                    }
                }
            } catch (error) {
                console.error('Error liking/unliking the post:', error);
                alert('An error occurred. Please try again.');
            }
        }
      

        document.addEventListener("DOMContentLoaded", function () {
            const commentInputs = document.querySelectorAll("textarea[id^='comment-content-']");

            commentInputs.forEach((input) => {
                input.addEventListener("input", function () {
                    // Reset height to allow shrinkage if the content is reduced
                    this.style.height = "auto";
                    // Adjust the height based on content (scrollHeight gives the required height)
                    this.style.height = `${this.scrollHeight}px`;
                });
            });
        });


        


        document.addEventListener('DOMContentLoaded', () => {

          

            let pageNumber = 1; // Start at page 1
            const pageSize = 10; // Number of posts per request
            let loading = false;
            const totalPosts = @Model.TotalPosts; // Total posts from the model
            let postsLoaded = @Model.Posts.Count; // Number of loaded posts
            let Username = encodeURIComponent("@Model.User.Username");

            // Function to load posts (both initial and lazy load)
            async function loadMorePosts() {
                if (loading || postsLoaded >= totalPosts) return;
                loading = true;
                document.getElementById('loading-indicator').classList.remove('hidden');

                try {
                    const response = await fetch(`/account/LoadProfilePosts?pageNumber=${pageNumber + 1}&pageSize=${pageSize}&username=${Username}`);
                    const data = await response.json();
                   
                    if (data.posts.length > 0) {
                        pageNumber++;
                        postsLoaded += data.posts.length;
                        appendPosts(data.posts); // Add fetched posts to the bottom
                    }

                    if (postsLoaded >= totalPosts) {
                        window.removeEventListener('scroll', handleScroll); // Stop loading if all posts are loaded
                    }
                } catch (error) {
                    console.error('Error loading posts:', error);
                } finally {
                    loading = false;
                    document.getElementById('loading-indicator').classList.add('hidden');
                }
            }

            // Append posts to the DOM
            function appendPosts(posts) {
                const postContainer = document.getElementById('post-container');
                const postDetailsUrl = '@Url.Action("PostDetails", "Account", new { postId = "__postId__" })';

                posts.forEach(post => {
                    const timeAgoString = timeAgo(post.CreatedAt);

                    // Check if the post already exists in the DOM (to avoid duplicates)
                    if (!document.querySelector(`[data-post-id="${post.Id}"]`)) {
                        const postElement = document.createElement('div');
                        postElement.classList.add('bg-card', 'p-4', 'rounded-lg', 'shadow-md', 'mb-4');
                        postElement.setAttribute('data-post-id', post.Id);
                        let showMore = false;
                        let truncatedContent = post.Content || '';

                        if (truncatedContent.length > 300) {
                            truncatedContent = post.Content.substring(0, 300) + "...";
                            showMore = true;
                        }
                        const dynamicPostDetailsUrl = postDetailsUrl.replace("__postId__", post.Id);

                        postElement.innerHTML = `
                        <div class="flex items-center mb-4">
                                    <img class="w-12 h-12 rounded-full" src="@Model.User.ProfileImageUrl" alt="User Avatar" />
                            <div class="ml-3">
                                <h2 class="text-lg font-semibold">@Model.User.Username</h2>
                                <p class="text-muted-foreground text-sm">${timeAgoString}</p>
                            </div>
                        </div>
                                                      ${post.Content ? ` <p  id = "post-content-${post.Id}" class="text-primary-foreground text-sm mb-2 max-w-[400px] break-words whitespace-normal" data - full - content="${post.Content}" >
                                ${truncatedContent} </p>` : ''}
                                <a href="javascript:void(0)" class="text-primary show-more-link" id="show-more-${post.Id}" onclick="togglePostContent(${post.Id})" style="display:none;">Show more</a>
                        ${post.ImageUrl ? `<img style="width:100%" class="rounded-lg mb-4" src="${post.ImageUrl}" alt="Post Image" />` : ''}
                        <div class="flex justify-between">
                            <div class="flex items-center">
                                <button class="bg-primary text-primary-foreground p-2 rounded-full hover:bg-primary/80" onclick="likePost(${post.Id})">
                                    ❤️
                                </button>
                                        <span class="ml-2 text-muted-foreground" id="like-count-${post.Id}">${post.JaimeCount}</span>
                            </div>
                            <div class="flex items-center">
                                                       <a href="${dynamicPostDetailsUrl}" class="bg-secondary text-secondary-foreground p-2 rounded-full hover:bg-secondary/80">
                                💬
                            </a>
                                         <a href="${dynamicPostDetailsUrl}">    <button>    <span class="ml-2 text-muted-foreground comment-count" id="comment-count-${post.Id}" data-post-id="${post.Id}">${post.Comments.length} comments</span>  </button></a>
                            </div>
                        </div>
                        <div class="mt-4">
                            <div class="relative mt-2">
                                <textarea id="comment-input-${post.Id}" class="border border-border rounded-lg p-2 w-full pl-10 resize-none overflow-hidden" placeholder="Write a comment..." rows="1"></textarea>
                                <button class="absolute top-2 right-2 bg-primary text-primary-foreground p-2 rounded-full hover:bg-primary/80" onclick="addComment(${post.Id})">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                                    </svg>
                                </button>
                            </div>
                                    <div class="comments-section mt-4">
                                    </div>
                        </div>
                    `;

                        postContainer.appendChild(postElement);
                        if (showMore) {
                            const showMoreLink = document.getElementById(`show-more-${post.Id}`);
                            showMoreLink.style.display = 'inline';
                        }
                    }
                });

                // Add click event listeners to comment buttons and comment counts to navigate to the post detail page
                document.querySelectorAll('.comment-button, .comment-count').forEach(element => {
                    element.addEventListener('click', function () {
                        const postId = this.getAttribute('data-post-id');
                        const postDetailsUrl = '@Url.Action("PostDetails", "Account")';
                        window.location.href = `${postDetailsUrl}?postId=${postId}`;
                    });
                });
            }

            // Handle scroll event for lazy loading
            function handleScroll() {
                const scrollPosition = window.innerHeight + window.scrollY;
                const documentHeight = document.documentElement.offsetHeight;
                if (scrollPosition >= documentHeight) {
                    loadMorePosts();
                }
            }

            // Attach scroll event listener
            window.addEventListener('scroll', handleScroll);

            // Function to trigger profile image upload
            function triggerProfileImageUpload() {
                document.getElementById('profileImageInput').click();
            }

            // Function to trigger cover image upload
            function triggerCoverImageUpload() {
                document.getElementById('coverImageInput').click();
            }

            // Handle profile image form submission
            document.getElementById('profileImageInput').addEventListener('change', (event) => {
                document.getElementById('profileImageForm').submit();
            });

            // Handle cover image form submission
            document.getElementById('coverImageInput').addEventListener('change', (event) => {
                document.getElementById('coverImageForm').submit();
            });
            document.getElementById('submitPost').addEventListener('click', async () => {
                const submitButton = document.getElementById('submitPost');
                const loadingIcon = document.getElementById('loadingIcon');
                const form = document.getElementById('createPostForm');
                const formData = new FormData(form);
                const postType = formData.get('Post.Type');
                const content = formData.get('Post.Content').trim();
                const imagePrompt = formData.get('Post.ImagePrompt').trim();

                document.getElementById('content-validation').innerText = '';

               
              
                // Additional validation for post types
                if (postType === 'text_image') {
                    const imageFile = document.getElementById('image-upload').files[0];
                    if (!imageFile && !content) {
                        document.getElementById('content-validation').innerText = 'Veuillez fournir une image ou du contenu.';
                        return;
                    }
                } else if (postType === 'ai_image') {
                    if (!imagePrompt) {
                        document.getElementById('content-validation').innerText = 'Veuillez fournir une description pour générer l\'image.';
                        return;
                    }
                }

                // Disable the submit button and show the loading icon
                submitButton.disabled = true;
                submitButton.classList.add('opacity-50'); // Optional: visually indicate button is disabled
                loadingIcon.classList.remove('hidden');   // Show loading icon
                loadingIcon.classList.add('rotate');      // Start rotating the icon

                try {
                    const response = await fetch('/account/CreatePost', {
                        method: 'POST',
                        body: formData
                    });

                    const result = await response.json();
                    if (result.success) {
                        form.reset(); // Clear form
                        removeImagePreview(); // Remove the image preview
                        appendnewPosts(result.post); // Add new post to the feed
                    } else {
                        document.getElementById('content-validation').innerText = result.message;
                    }
                } catch (error) {
                    console.error('Error creating post:', error);
                    document.getElementById('content-validation').innerText = 'Une erreur est survenue lors de la création du post.';
                } finally {
                    // Re-enable the submit button and hide the loading icon
                    submitButton.disabled = false;
                    submitButton.classList.remove('opacity-50'); // Remove disabled styling
                    loadingIcon.classList.add('hidden');         // Hide the loading icon
                    loadingIcon.classList.remove('rotate');      // Stop rotating
                }
            });


            // Preview selected image
            function previewImage() {
                const input = document.getElementById('image-upload');
                const preview = document.getElementById('preview-image');

                if (input.files && input.files[0]) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        preview.src = e.target.result;
                    };
                    reader.readAsDataURL(input.files[0]);
                } else {
                    preview.src = '/images/static/gallery.png'; // Reset to default image if no file selected
                }
            }

            // Function to remove the image preview after submission
            function removeImagePreview() {
                const preview = document.getElementById('preview-image');
                preview.src = '/images/static/gallery.png'; // Reset to default image after submission
            }


            window.triggerProfileImageUpload = triggerProfileImageUpload;
            window.triggerCoverImageUpload = triggerCoverImageUpload;
            window.previewImage = previewImage;
            });


        function appendnewPosts(post) {
            const postContainer = document.getElementById('post-container');
            const timeAgoString = timeAgo(post.CreatedAt);

                // Check if the post already exists in the DOM (to avoid duplicates)
                if (!document.querySelector(`[data-post-id="${post.Id}"]`)) {
                    const postElement = document.createElement('div');
                    postElement.classList.add('bg-card', 'p-4', 'rounded-lg', 'shadow-md', 'mb-4');
                    postElement.setAttribute('data-post-id', post.Id);
                
                let showMore = false;
                let truncatedContent = post.Content || '';
                   
                if (truncatedContent.length > 300) {
                        truncatedContent = post.Content.substring(0, 300) + "...";
                        showMore = true;
                    }
                    
               
                    postElement.innerHTML = `
                                    <div class="flex items-center mb-4">
                                        <img class="w-12 h-12 rounded-full" src="@Model.User.ProfileImageUrl" alt="User Avatar" />
                                        <div class="ml-3">
                                            <h2 class="text-lg font-semibold">@Model.User.Username</h2>
                                                            <p class="text-muted-foreground text-sm">${timeAgoString}</p>
                                        </div>
                                    </div>
                                                    ${post.Content ?` <p  id = "post-content-${post.Id}" class="text-primary-foreground text-sm mb-2 max-w-[400px] break-words whitespace-normal" data - full - content="${post.Content}" >
                        ${truncatedContent} </p>` : ''}
                        
                        <a href="javascript:void(0)" class="text-primary show-more-link" id="show-more-${post.Id}" onclick="togglePostContent(${post.Id})" style="display:none;">Show more</a>
                                            ${post.ImageUrl ? `<img style="width:100%" class="rounded-lg mb-4" src="${post.ImageUrl}" alt="Post Image" />` : ''}
                                    <div class="flex justify-between">
                                        <div class="flex items-center">
                                            <button class="bg-primary text-primary-foreground p-2 rounded-full hover:bg-primary/80" onclick="likePost(${post.Id})">
                                                ❤️
                                            </button>
                                            <span class="ml-2 text-muted-foreground" id="like-count-${post.Id}">${post.JaimeCount}</span>
                                        </div>
                                        <div class="flex items-center">
                                                    <button class="bg-secondary text-secondary-foreground p-2 rounded-full hover:bg-secondary/80 comment-button" data-post-id="${post.Id}">
                                            💬
                                        </button>
                                            <button>    <span class="ml-2 text-muted-foreground comment-count" id="comment-count-${post.Id}" data-post-id="${post.Id}">0 comments</span>  </button>
                                        </div>
                                    </div>
                                      <div class="mt-4">
                        <div class="relative mt-2">

                                    <textarea id="comment-input-${post.Id}" class="border border-border rounded-lg p-2 w-full pl-10 resize-none overflow-hidden" placeholder="Write a comment..." rows="1"></textarea>


                            <button class="absolute top-2 right-2 bg-primary text-primary-foreground p-2 rounded-full hover:bg-primary/80" onclick="addComment(${post.Id})">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                                </svg>
                            </button>
                        </div>
                                 <div class="comments-section mt-4">
                                            </div>
                    </div>                                   
                                `;

                postContainer.insertBefore(postElement, postContainer.firstChild);
                if (showMore) {
                    const showMoreLink = document.getElementById(`show-more-${post.Id}`);
                    showMoreLink.style.display = 'inline';
                }
                }
        }

        document.addEventListener('DOMContentLoaded', function () {
            function timeAgo(date) {
                const now = new Date();
                const seconds = Math.floor((now - new Date(date)) / 1000);

                let interval = Math.floor(seconds / 31536000); // Years
                if (interval >= 1) return interval + (interval === 1 ? " year ago" : " years ago");

                interval = Math.floor(seconds / 2592000); // Months
                if (interval >= 1) return interval + (interval === 1 ? " month ago" : " months ago");

                interval = Math.floor(seconds / 86400); // Days
                if (interval >= 1) return interval + (interval === 1 ? " day ago" : " days ago");

                interval = Math.floor(seconds / 3600); // Hours
                if (interval >= 1) return interval + (interval === 1 ? " hour ago" : " hours ago");

                interval = Math.floor(seconds / 60); // Minutes
                if (interval >= 1) return interval + (interval === 1 ? " minute ago" : " minutes ago");

                return "Just now";
            }
            function updateTimeAgo() {
                document.querySelectorAll('[data-date]').forEach(element => {
                    const date = element.getAttribute('data-date');
                    element.textContent = timeAgo(date);
                });
            }

            // Initialize time ago for existing posts/comments
            updateTimeAgo();
        });
        document.addEventListener('DOMContentLoaded', function () {
            const urlParams = new URLSearchParams(window.location.search);
            const newPostContent = urlParams.get('newPostContent');
            const username = urlParams.get('username');

            if (newPostContent) {
                // Set the content of the post form
               

                // Scroll to the post creation section
                const postCreationSection = document.getElementById('post-creation-section');
                if (postCreationSection) {
                    postCreationSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
                }
                const postContentTextarea = document.querySelector('textarea[name="Post.Content"]');
                if (postContentTextarea) {
                    postContentTextarea.value = decodeURIComponent(newPostContent);
                }
                // Submit the form automatically
                const submitButton = document.getElementById('submitPost');
                if (submitButton) {
                    submitButton.click();
                }

                // Optional: Clear the query parameters from the URL after use
                window.history.replaceState({}, document.title, window.location.pathname);
            }
        });


    </script>
}
